plugins.apply 'fabric-loom'
plugins.apply 'io.shcm.shsupercm.fabric.fletchingtable'

version = "${property('mod.version')}+${stonecutter.current.version}"
group = 'shcm.shsupercm.fabric.citresewn.defaults'

repositories {
    maven { url 'https://maven.terraformersmc.com/releases/' }
    maven { url 'https://maven.shedaniel.me/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.version}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"

    modCompileOnly "net.fabricmc:fabric-loader:${property('deps.fabric-loader')}"
    modCompileOnly "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric-api')}"

    implementation project(path: stonecutter.node.sibling("").getPath(), configuration: "namedElements")

    modCompileOnly "com.terraformersmc:modmenu:${property('deps.modmenu')}"
    modCompileOnly "me.shedaniel.cloth:cloth-config-fabric:${property('deps.cloth-config')}"

    // testing mods
    modRuntimeOnly "net.fabricmc:fabric-loader:${property('deps.fabric-loader')}"
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric-api')}"
    modRuntimeOnly "com.terraformersmc:modmenu:${property('deps.modmenu')}"
    modRuntimeOnly "me.shedaniel.cloth:cloth-config-fabric:${property('deps.cloth-config')}"
}

fletchingTable {
    defaultMixinEnvironment = "auto"
}

loom {
    accessWidenerPath = file("../../src/main/resources/citresewn-defaults.accesswidener")

    runConfigs.client.ideConfigGenerated = false
    runConfigs.server.ideConfigGenerated = false
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    archivesBaseName = "${property('mod.jarname')}-defaults"
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'mod_version': version
    }
}

jar {
    archiveClassifier.set 'dev'

    from rootProject.file('LICENSE')
}

if (stonecutter.current.isActive) {
    loom.runConfigs.client.ideConfigGenerated = true

    plugins.apply 'com.modrinth.minotaur'

    modrinth {
        token = TOKEN_MODRINTH
        projectId = property('publish.modrinth.defaults.id')
        uploadFile = remapJar
        versionNumber = version
        versionName = "v" + version
        additionalFiles = [sourcesJar.outputs.getFiles().singleFile]
        gameVersions = Arrays.asList(property('publish.target-mc').split(","))
    }

    rootProject.tasks.named('publishActive') {
        Task remapJarTask = tasks.getByName 'remapJar'
        Task modrinthTask = tasks.getByName 'modrinth'

        dependsOn remapJarTask, modrinthTask
        modrinthTask.mustRunAfter remapJarTask
    }
}
